{"version":3,"sources":["components/Box.js","components/Board.js","components/Head.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","onClick","console","log","corX","corY","changeCorColor","className","style","backgroundColor","clr","ATwoD","key","Board","forceUpdate","useState","setValue","value","useForceUpdate","corx","cory","tx","ty","map","rw","cl","matrix","Head","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24b861c3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Box.css'\r\nfunction Box(props) {\r\n    const handleClick = () => {\r\n        console.log(props.corX, props.corY);\r\n        props.changeCorColor(props.corX, props.corY);\r\n    }\r\n    const colorChange = () => {\r\n        if (props.clr === 0) {\r\n            return \"d1d1d1\";\r\n        }\r\n        else if (props.clr === 1) {\r\n            return \"black\";\r\n        }\r\n        else {\r\n            return \"red\";\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={handleClick}><div className='box' style={{ backgroundColor: `${colorChange()}` }}></div></button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Box\r\n","import './Board.css'\r\nimport React,{useState} from 'react'\r\nimport Box from './Box';\r\nlet ATwoD =[[0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0]];\r\nlet key = 0;\r\n\r\nfunction useForceUpdate(){\r\n    // eslint-disable-next-line\r\n    const [value, setValue] = useState(0); // integer state\r\n    return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\n\r\nfunction Board() {\r\n    const forceUpdate = useForceUpdate();\r\n    let[corX,corY]=[0,0];\r\n\r\n    \r\n\r\n    const updateCor = ()=>{\r\n        corY = 0;\r\n        corX++;\r\n    }\r\n    const changeCorColor=(corx,cory)=>{\r\n        let tx = corx;\r\n        let ty = cory;\r\n        ATwoD =[[0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0],\r\n            [0,1,0,1,0,1,0,1],\r\n            [1,0,1,0,1,0,1,0]];\r\n        while(ty>=0 && tx>=0){\r\n            ATwoD[tx][ty]=-1;\r\n            ty--;\r\n            tx--;\r\n        }\r\n        tx = corx;\r\n        ty = cory;\r\n        while(ty<8 && tx<8){\r\n            ATwoD[tx][ty]=-1;\r\n            ty++;\r\n            tx++;\r\n        }\r\n        tx = corx;\r\n        ty = cory;\r\n        while(ty<8 && tx>=0){\r\n            ATwoD[tx][ty]=-1;\r\n            ty++;\r\n            tx--;\r\n        }\r\n        tx = corx;\r\n        ty = cory;\r\n        while(ty>=0 && tx<8){\r\n            ATwoD[tx][ty]=-1;\r\n            ty--;\r\n            tx++;\r\n        }\r\n        forceUpdate();\r\n    }\r\n    return (\r\n        <>\r\n        <div className='center'>\r\n      \r\n            {ATwoD.map((rw)=>{\r\n                return(\r\n                    <div key={key++} className='board'>\r\n                    {\r\n                    rw.map((cl)=>{\r\n                    return (<Box key={key++} clr = {cl} corX ={corX} corY={corY++} matrix={ATwoD} changeCorColor={changeCorColor}/>)\r\n                    })\r\n                    }\r\n                    {updateCor()}\r\n                    </div>\r\n                )\r\n                })}\r\n        </div>\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\nimport './Head.css'\r\nfunction Head() {\r\n    return (\r\n        <div className='style'>\r\n            <h1>Select square to highlight it's diagonal squares</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Head\r\n","// import logo from './logo.svg';\n\nimport Board from './components/Board';\nimport Head from './components/Head';\n\nfunction App() {\n  return (\n    <>\n    <Head/>\n    <Board/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}